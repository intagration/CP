import java.util.*;

public class PrimsMST {
    static final int INF = Integer.MAX_VALUE;

    // Function to find the vertex with minimum key value
    static int minKey(int[] key, boolean[] mstSet, int V) {
        int min = INF, minIndex = -1;

        for (int v = 0; v < V; v++) {
            if (!mstSet[v] && key[v] < min) {
                min = key[v];
                minIndex = v;
            }
        }

        return minIndex;
    }

    // Function to print the MST stored in parent[]
    static void printMST(int[] parent, int[][] graph, int V) {
        System.out.println("Edge \tWeight");
        int totalWeight = 0;
        for (int i = 1; i < V; i++) {
            System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]);
            totalWeight += graph[i][parent[i]];
        }
        System.out.println("Total Weight of MST: " + totalWeight);
    }

    static void primMST(int[][] graph, int V) {
        int[] parent = new int[V];     // Array to store constructed MST
        int[] key = new int[V];        // Key values used to pick min weight edge
        boolean[] mstSet = new boolean[V]; // To represent vertices included in MST

        // Initialize all keys as INFINITE
        Arrays.fill(key, INF);
        key[0] = 0;      // Start from the first vertex
        parent[0] = -1;  // First node is always root of MST

        for (int count = 0; count < V - 1; count++) {
            int u = minKey(key, mstSet, V);  // Pick min key vertex not yet in MST
            mstSet[u] = true;

            // Update key and parent of adjacent vertices
            for (int v = 0; v < V; v++) {
                if (graph[u][v] != 0 && !mstSet[v] && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
            }
        }

        printMST(parent, graph, V);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input number of vertices
        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();

        // Input graph as adjacency matrix
        int[][] graph = new int[V][V];
        System.out.println("Enter adjacency matrix (0 if no edge):");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                graph[i][j] = sc.nextInt();
            }
        }

        primMST(graph, V);
    }
}


/*
Input:
Enter number of vertices: 5
Enter adjacency matrix (0 if no edge):
0 2 0 6 0
2 0 3 8 5
0 3 0 0 7
6 8 0 0 9
0 5 7 9 0

output:
Edge 	Weight
0 - 1	2
1 - 2	3
0 - 3	6
1 - 4	5
Total Weight of MST: 16
*/