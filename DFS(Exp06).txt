import java.util.*;

public class DFS {

    // Recursive DFS function
    static void dfs(List<List<Integer>> graph, boolean[] visited, int node) {
        visited[node] = true;
        System.out.print(node + " ");

        for (int neighbor : graph.get(node)) {
            if (!visited[neighbor]) {
                dfs(graph, visited, neighbor);
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input number of vertices
        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();

        // Input number of edges
        System.out.print("Enter number of edges: ");
        int E = sc.nextInt();

        // Create graph using adjacency list
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++)
            graph.add(new ArrayList<>());

        // Input edges
        System.out.println("Enter edges (from to):");
        for (int i = 0; i < E; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            graph.get(u).add(v);
            graph.get(v).add(u); // For undirected graph
        }

        // Input starting node
        System.out.print("Enter starting node for DFS: ");
        int start = sc.nextInt();

        // DFS traversal
        boolean[] visited = new boolean[V];
        System.out.println("DFS Traversal starting from node " + start + ":");
        dfs(graph, visited, start);
        System.out.println();
    }
}
/*
input:
Enter number of vertices: 5
Enter number of edges: 6
Enter edges (from to):
0 1
0 2
1 2
1 3
2 4
3 4
Enter starting node for DFS: 0

Output:
DFS Traversal starting from node 0:
0 1 2 4 3 


*/