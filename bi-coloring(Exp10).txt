import java.util.*;

public class BiColoring {

    static boolean isBipartite(int[][] graph, int V) {
        int[] color = new int[V];
        Arrays.fill(color, -1); // -1 means uncolored

        for (int start = 0; start < V; start++) {
            if (color[start] == -1) { // Not colored yet
                Queue<Integer> q = new LinkedList<>();
                q.add(start);
                color[start] = 0;

                while (!q.isEmpty()) {
                    int u = q.poll();
                    for (int v = 0; v < V; v++) {
                        if (graph[u][v] == 1) { // there's an edge
                            if (color[v] == -1) {
                                color[v] = 1 - color[u]; // opposite color
                                q.add(v);
                            } else if (color[v] == color[u]) {
                                return false; // Same color on both ends
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

    public static void main(String[] args) {
        // 4-vertex graph (bi-colorable)
        int[][] graph = {
            {0, 1, 0, 1},
            {1, 0, 1, 0},
            {0, 1, 0, 1},
            {1, 0, 1, 0}
        };

        if (isBipartite(graph, 4))
            System.out.println("Graph is Bi-colorable (Bipartite)");
        else
            System.out.println("Graph is NOT Bi-colorable (Not Bipartite)");
    }
}
