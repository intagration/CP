public class NQueen {

    static int N = 4; // You can change this value to try different board sizes

    // Function to print the board
    static void printBoard(int[][] board) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print((board[i][j] == 1 ? "Q " : ". "));
            }
            System.out.println();
        }
    }

    // Check if it's safe to place a queen at board[row][col]
    static boolean isSafe(int[][] board, int row, int col) {
        // Check the column
        for (int i = 0; i < row; i++)
            if (board[i][col] == 1)
                return false;

        // Check upper-left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;

        // Check upper-right diagonal
        for (int i = row, j = col; i >= 0 && j < N; i--, j++)
            if (board[i][j] == 1)
                return false;

        return true;
    }

    // Solve the N-Queen problem using backtracking
    static boolean solveNQueen(int[][] board, int row) {
        // Base Case: If all queens are placed
        if (row == N) {
            printBoard(board);
            return true;
        }

        boolean result = false;
        // Try placing queen in all columns one by one
        for (int col = 0; col < N; col++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 1; // Place the queen

                // Recursively place rest of the queens
                result = solveNQueen(board, row + 1) || result;

                board[row][col] = 0; // Backtrack
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[][] board = new int[N][N];

        if (!solveNQueen(board, 0)) {
            System.out.println("No solution exists.");
        }
    }
}
